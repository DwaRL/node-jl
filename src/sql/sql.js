/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,70],$V1=[5,68,70],$V2=[5,61,68,70],$V3=[5,58,61,68,70],$V4=[5,56,58,61,68,70],$V5=[5,51,53,54,56,58,61,68,70],$V6=[1,40],$V7=[1,41],$V8=[1,35],$V9=[1,37],$Va=[1,38],$Vb=[1,39],$Vc=[1,27],$Vd=[1,28],$Ve=[1,29],$Vf=[1,33],$Vg=[1,31],$Vh=[5,49,51,53,54,56,58,61,68,70],$Vi=[5,40,49,51,53,54,56,58,61,68,70],$Vj=[1,54],$Vk=[1,55],$Vl=[1,56],$Vm=[1,57],$Vn=[1,58],$Vo=[1,59],$Vp=[1,60],$Vq=[1,61],$Vr=[1,62],$Vs=[1,63],$Vt=[1,64],$Vu=[1,65],$Vv=[1,66],$Vw=[1,67],$Vx=[1,68],$Vy=[1,69],$Vz=[5,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,38,40,42,49,51,53,54,56,58,61,63,64,65,68,70],$VA=[1,74],$VB=[5,9,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,38,40,42,49,51,52,53,54,56,58,61,63,64,65,68,70],$VC=[5,51,52,53,54,56,58,61,68,70],$VD=[5,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,38,40,42,49,51,53,54,56,58,61,63,64,65,68,70],$VE=[5,22,23,28,29,30,31,32,33,38,40,42,49,51,53,54,56,58,61,63,64,65,68,70],$VF=[5,40,70],$VG=[1,118],$VH=[5,38,40,61,68,70],$VI=[5,19,20,21,22,23,28,29,30,31,32,33,38,40,42,49,51,53,54,56,58,61,63,64,65,68,70],$VJ=[5,28,29,38,40,42,49,51,53,54,56,58,61,63,64,65,68,70],$VK=[5,28,29,30,31,32,33,38,40,42,49,51,53,54,56,58,61,63,64,65,68,70];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"select":4,"EOF":5,"ident":6,"IDENT":7,"complexIdent":8,".":9,"number":10,"NUMBER":11,"const":12,"STRING":13,"NULL":14,"TRUE":15,"FALSE":16,"expression":17,"DISTINCT":18,"*":19,"%":20,"/":21,"+":22,"-":23,"=":24,"!==":25,"===":26,"!=":27,"AND":28,"OR":29,">":30,">=":31,"<":32,"<=":33,"!":34,"IN":35,"(":36,"expressionsList":37,")":38,"COUNT":39,",":40,"column":41,"AS":42,"columns":43,"selectClause":44,"SELECT":45,"selectColumns":46,"table":47,"selectFrom":48,"FROM":49,"selectJoin":50,"JOIN":51,"ON":52,"INNER":53,"LEFT":54,"selectWhere":55,"WHERE":56,"selectGroup":57,"GROUP":58,"BY":59,"selectHaving":60,"HAVING":61,"order":62,"ASC":63,"DESC":64,"NUMERIC":65,"ordersList":66,"selectOrder":67,"ORDER":68,"selectLimit":69,"LIMIT":70,"OFFSET":71,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"IDENT",9:".",11:"NUMBER",13:"STRING",14:"NULL",15:"TRUE",16:"FALSE",18:"DISTINCT",19:"*",20:"%",21:"/",22:"+",23:"-",24:"=",25:"!==",26:"===",27:"!=",28:"AND",29:"OR",30:">",31:">=",32:"<",33:"<=",34:"!",35:"IN",36:"(",38:")",39:"COUNT",40:",",42:"AS",45:"SELECT",49:"FROM",51:"JOIN",52:"ON",53:"INNER",54:"LEFT",56:"WHERE",58:"GROUP",59:"BY",61:"HAVING",63:"ASC",64:"DESC",65:"NUMERIC",68:"ORDER",70:"LIMIT",71:"OFFSET"},
productions_: [0,[3,2],[6,1],[8,3],[8,1],[10,1],[12,1],[12,1],[12,1],[12,1],[12,1],[17,2],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,2],[17,2],[17,5],[17,4],[17,3],[17,4],[17,4],[17,1],[17,1],[17,3],[37,3],[37,1],[41,3],[41,1],[43,3],[43,1],[44,1],[46,2],[46,2],[47,3],[47,1],[48,3],[48,1],[50,5],[50,6],[50,6],[50,1],[55,3],[55,1],[57,4],[57,1],[60,3],[60,1],[62,2],[62,2],[62,1],[62,3],[62,3],[62,2],[66,3],[66,1],[67,4],[67,1],[69,5],[69,5],[69,3],[69,1],[4,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 this.$ = new nodes.Ident($$[$0]); 
break;
case 3:
 $$[$0-2].fragments.push($$[$0].name); this.$ = $$[$0-2]; 
break;
case 4:
 this.$ = new nodes.ComplexIdent($$[$0].name); 
break;
case 5:
 this.$ = new nodes.Number($$[$0]); 
break;
case 6:
 this.$ = new nodes.String($$[$0]); 
break;
case 7: case 35: case 53: case 55: case 57: case 59: case 69: case 74:
 this.$ = $$[$0]; 
break;
case 8:
 this.$ = new nodes.Null(); 
break;
case 9:
 this.$ = new nodes.Boolean(true); 
break;
case 10:
 this.$ = new nodes.Boolean(false); 
break;
case 11:
 this.$ = new nodes.Distinct($$[$0]); 
break;
case 12: case 13: case 14: case 15: case 16:
 this.$ = new nodes.BinaryOperation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26:
 this.$ = new nodes.ComparsionOperation($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 27: case 28:
 this.$ = new nodes.UnaryOperation($$[$0-1], $$[$0]); 
break;
case 29:
 this.$ = new nodes.In($$[$0-4], $$[$0-1]); 
break;
case 30:
 this.$ = new nodes.Call(new nodes.FunctionIdent($$[$0-3]), $$[$0-1]); 
break;
case 31:
 this.$ = new nodes.Call(new nodes.FunctionIdent($$[$0-2]), []); 
break;
case 32:
 this.$ = new nodes.Call(new nodes.FunctionIdent(new nodes.ComplexIdent($$[$0-3])), [$$[$0-1]]); 
break;
case 33:
 this.$ = new nodes.Call(new nodes.FunctionIdent(new nodes.ComplexIdent($$[$0-3])), []); 
break;
case 34:
 this.$ = new nodes.ColumnIdent($$[$0]); 
break;
case 36:
 this.$ = new nodes.Brackets($$[$0-1]); 
break;
case 37: case 66:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 38: case 42: case 67:
 this.$ = [$$[$0]]; 
break;
case 39:
 this.$ = new nodes.Column($$[$0-2], new nodes.ColumnAlias($$[$0])); 
break;
case 40:
 this.$ = new nodes.Column($$[$0]); 
break;
case 41:
 this.$ = $$[$0-2].concat($$[$0]); 
break;
case 43:
 this.$ = new nodes.Select(); 
break;
case 44:
 $$[$0-1].columns = $$[$0]; this.$ = $$[$0-1]; 
break;
case 45:
 $$[$0-1].columns = null; this.$ = $$[$0-1]; 
break;
case 46:
 this.$ = new nodes.Table(new nodes.TableIdent($$[$0-2]), new nodes.TableAlias($$[$0])); 
break;
case 47:
 this.$ = new nodes.Table(new nodes.TableIdent($$[$0])); 
break;
case 48:
 $$[$0-2].table = $$[$0]; this.$ = $$[$0-2]; 
break;
case 49:
 $$[$0].table = null; this.$ = $$[$0]; 
break;
case 50:
 $$[$0-4].join(new nodes.InnerJoin($$[$0-2], $$[$0])); this.$ = $$[$0-4]; 
break;
case 51:
 $$[$0-5].join(new nodes.InnerJoin($$[$0-2], $$[$0])); this.$ = $$[$0-5]; 
break;
case 52:
 $$[$0-5].join(new nodes.LeftJoin($$[$0-2], $$[$0])); this.$ = $$[$0-5]; 
break;
case 54:
 $$[$0-2].where = $$[$0]; this.$ = $$[$0-2]; 
break;
case 56:
 $$[$0-3].groups = $$[$0]; this.$ = $$[$0-3]; 
break;
case 58:
 $$[$0-2].having = $$[$0]; this.$ = $$[$0-2]; 
break;
case 60: case 61:
 this.$ = new nodes.Order($$[$0-1], $$[$0]) 
break;
case 62:
 this.$ = new nodes.Order($$[$0]) 
break;
case 63: case 64:
 this.$ = new nodes.Order($$[$0-2], $$[$0], $$[$0-1]) 
break;
case 65:
 this.$ = new nodes.Order($$[$0-1], 'ASC', $$[$0]) 
break;
case 68:
 $$[$0-3].orders = $$[$0]; this.$ = $$[$0-3]; 
break;
case 70:
 $$[$0-4].setLimit($$[$0].value, $$[$0-2].value); this.$ = $$[$0-4]; 
break;
case 71:
 $$[$0-4].setLimit($$[$0-2].value, $$[$0].value); this.$ = $$[$0-4]; 
break;
case 72:
 $$[$0-2].setLimit($$[$0].value); this.$ = $$[$0-2]; 
break;
case 73:
 this.$ = $$[$0] 
break;
}
},
table: [{3:1,4:2,44:11,45:[1,12],46:10,48:9,50:8,55:7,57:6,60:5,67:4,69:3},{1:[3]},{5:[1,13]},{5:[2,74]},{5:[2,73],70:[1,14]},o($V0,[2,69],{68:[1,15]}),o($V1,[2,59],{61:[1,16]}),o($V2,[2,57],{58:[1,17]}),o($V3,[2,55],{56:[1,18]}),o($V4,[2,53],{51:[1,19],53:[1,20],54:[1,21]}),o($V5,[2,49],{49:[1,22]}),{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:26,18:$Vc,19:[1,24],23:$Vd,34:$Ve,36:$Vf,39:$Vg,41:25,43:23},o([7,11,13,14,15,16,18,19,23,34,36,39],[2,43]),{1:[2,1]},{10:42,11:$V7},{59:[1,43]},{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:44,18:$Vc,23:$Vd,34:$Ve,36:$Vf,39:$Vg},{59:[1,45]},{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:46,18:$Vc,23:$Vd,34:$Ve,36:$Vf,39:$Vg},{6:34,7:$V6,8:48,47:47},{51:[1,49]},{51:[1,50]},{6:34,7:$V6,8:48,47:51},o($Vh,[2,44],{40:[1,52]}),o($Vh,[2,45]),o($Vi,[2,42]),o($Vi,[2,40],{19:$Vj,20:$Vk,21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,35:$Vy,42:[1,53]}),{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:70,18:$Vc,23:$Vd,34:$Ve,36:$Vf,39:$Vg},{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:71,18:$Vc,23:$Vd,34:$Ve,36:$Vf,39:$Vg},{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:72,18:$Vc,23:$Vd,34:$Ve,36:$Vf,39:$Vg},o($Vz,[2,34],{9:$VA,36:[1,73]}),{36:[1,75]},o($Vz,[2,35]),{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:76,18:$Vc,23:$Vd,34:$Ve,36:$Vf,39:$Vg},o($VB,[2,4]),o($Vz,[2,6]),o($Vz,[2,7]),o($Vz,[2,8]),o($Vz,[2,9]),o($Vz,[2,10]),o($VB,[2,2]),o([5,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,38,40,42,49,51,53,54,56,58,61,63,64,65,68,70,71],[2,5]),{5:[2,72],40:[1,77],71:[1,78]},{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:81,18:$Vc,23:$Vd,34:$Ve,36:$Vf,39:$Vg,62:80,66:79},o($V1,[2,58],{19:$Vj,20:$Vk,21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,35:$Vy}),{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:83,18:$Vc,23:$Vd,34:$Ve,36:$Vf,37:82,39:$Vg},o($V3,[2,54],{19:$Vj,20:$Vk,21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,35:$Vy}),{52:[1,84]},o($VC,[2,47],{9:$VA,42:[1,85]}),{6:34,7:$V6,8:48,47:86},{6:34,7:$V6,8:48,47:87},o($V5,[2,48]),{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:26,18:$Vc,23:$Vd,34:$Ve,36:$Vf,39:$Vg,41:25,43:88},{6:89,7:$V6},{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:90,18:$Vc,23:$Vd,34:$Ve,36:$Vf,39:$Vg},{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:91,18:$Vc,23:$Vd,34:$Ve,36:$Vf,39:$Vg},{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:92,18:$Vc,23:$Vd,34:$Ve,36:$Vf,39:$Vg},{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:93,18:$Vc,23:$Vd,34:$Ve,36:$Vf,39:$Vg},{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:94,18:$Vc,23:$Vd,34:$Ve,36:$Vf,39:$Vg},{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:95,18:$Vc,23:$Vd,34:$Ve,36:$Vf,39:$Vg},{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:96,18:$Vc,23:$Vd,34:$Ve,36:$Vf,39:$Vg},{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:97,18:$Vc,23:$Vd,34:$Ve,36:$Vf,39:$Vg},{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:98,18:$Vc,23:$Vd,34:$Ve,36:$Vf,39:$Vg},{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:99,18:$Vc,23:$Vd,34:$Ve,36:$Vf,39:$Vg},{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:100,18:$Vc,23:$Vd,34:$Ve,36:$Vf,39:$Vg},{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:101,18:$Vc,23:$Vd,34:$Ve,36:$Vf,39:$Vg},{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:102,18:$Vc,23:$Vd,34:$Ve,36:$Vf,39:$Vg},{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:103,18:$Vc,23:$Vd,34:$Ve,36:$Vf,39:$Vg},{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:104,18:$Vc,23:$Vd,34:$Ve,36:$Vf,39:$Vg},{36:[1,105]},o($VD,[2,11],{35:$Vy}),o($VE,[2,27],{19:$Vj,20:$Vk,21:$Vl,24:$Vo,25:$Vp,26:$Vq,27:$Vr,35:$Vy}),o($Vz,[2,28]),{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:83,18:$Vc,23:$Vd,34:$Ve,36:$Vf,37:106,38:[1,107],39:$Vg},{6:108,7:$V6},{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:109,18:$Vc,19:[1,110],23:$Vd,34:$Ve,36:$Vf,39:$Vg},{19:$Vj,20:$Vk,21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,35:$Vy,38:[1,111]},{10:112,11:$V7},{10:113,11:$V7},o($V0,[2,68],{40:[1,114]}),o($VF,[2,67]),o($VF,[2,62],{19:$Vj,20:$Vk,21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,35:$Vy,63:[1,115],64:[1,116],65:[1,117]}),o($V2,[2,56],{40:$VG}),o($VH,[2,38],{19:$Vj,20:$Vk,21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,35:$Vy}),{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:119,18:$Vc,23:$Vd,34:$Ve,36:$Vf,39:$Vg},{6:120,7:$V6},{52:[1,121]},{52:[1,122]},o($Vi,[2,41]),o($Vi,[2,39]),o($VI,[2,12],{24:$Vo,25:$Vp,26:$Vq,27:$Vr,35:$Vy}),o($VI,[2,13],{24:$Vo,25:$Vp,26:$Vq,27:$Vr,35:$Vy}),o($VI,[2,14],{24:$Vo,25:$Vp,26:$Vq,27:$Vr,35:$Vy}),o($VE,[2,15],{19:$Vj,20:$Vk,21:$Vl,24:$Vo,25:$Vp,26:$Vq,27:$Vr,35:$Vy}),o($VE,[2,16],{19:$Vj,20:$Vk,21:$Vl,24:$Vo,25:$Vp,26:$Vq,27:$Vr,35:$Vy}),o($VD,[2,17],{35:$Vy}),o($VD,[2,18],{35:$Vy}),o($VD,[2,19],{35:$Vy}),o($VD,[2,20],{35:$Vy}),o($VJ,[2,21],{19:$Vj,20:$Vk,21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,30:$Vu,31:$Vv,32:$Vw,33:$Vx,35:$Vy}),o($VJ,[2,22],{19:$Vj,20:$Vk,21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,30:$Vu,31:$Vv,32:$Vw,33:$Vx,35:$Vy}),o($VK,[2,23],{19:$Vj,20:$Vk,21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,35:$Vy}),o($VK,[2,24],{19:$Vj,20:$Vk,21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,35:$Vy}),o($VK,[2,25],{19:$Vj,20:$Vk,21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,35:$Vy}),o($VK,[2,26],{19:$Vj,20:$Vk,21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,35:$Vy}),{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:83,18:$Vc,23:$Vd,34:$Ve,36:$Vf,37:123,39:$Vg},{38:[1,124],40:$VG},o($Vz,[2,31]),o($VB,[2,3]),{19:$Vj,20:$Vk,21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,35:$Vy,38:[1,125]},{38:[1,126]},o($Vz,[2,36]),{5:[2,70]},{5:[2,71]},{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:81,18:$Vc,23:$Vd,34:$Ve,36:$Vf,39:$Vg,62:127},o($VF,[2,60]),o($VF,[2,61]),o($VF,[2,65],{63:[1,128],64:[1,129]}),{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:130,18:$Vc,23:$Vd,34:$Ve,36:$Vf,39:$Vg},o($V4,[2,50],{19:$Vj,20:$Vk,21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,35:$Vy}),o($VC,[2,46]),{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:131,18:$Vc,23:$Vd,34:$Ve,36:$Vf,39:$Vg},{6:34,7:$V6,8:30,10:36,11:$V7,12:32,13:$V8,14:$V9,15:$Va,16:$Vb,17:132,18:$Vc,23:$Vd,34:$Ve,36:$Vf,39:$Vg},{38:[1,133],40:$VG},o($Vz,[2,30]),o($Vz,[2,32]),o($Vz,[2,33]),o($VF,[2,66]),o($VF,[2,63]),o($VF,[2,64]),o($VH,[2,37],{19:$Vj,20:$Vk,21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,35:$Vy}),o($V4,[2,51],{19:$Vj,20:$Vk,21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,35:$Vy}),o($V4,[2,52],{19:$Vj,20:$Vk,21:$Vl,22:$Vm,23:$Vn,24:$Vo,25:$Vp,26:$Vq,27:$Vr,28:$Vs,29:$Vt,30:$Vu,31:$Vv,32:$Vw,33:$Vx,35:$Vy}),o($Vz,[2,29])],
defaultActions: {3:[2,74],13:[2,1],112:[2,70],113:[2,71]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

var nodes = require('./nodes.js');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1: return 40; 
break;
case 2: return 14; 
break;
case 3: return 15; 
break;
case 4: return 16; 
break;
case 5: return 45; 
break;
case 6: return 49; 
break;
case 7: return 18; 
break;
case 8: return 65; 
break;
case 9: return 56; 
break;
case 10: return 68; 
break;
case 11: return 58; 
break;
case 12: return 59; 
break;
case 13: return 61; 
break;
case 14: return 39; 
break;
case 15: return 70; 
break;
case 16: return 71; 
break;
case 17: return 54; 
break;
case 18: return 53; 
break;
case 19: return 13; 
break;
case 20: return 13; 
break;
case 21: return 11; 
break;
case 22: return 42; 
break;
case 23: return 63; 
break;
case 24: return 64; 
break;
case 25: return 35; 
break;
case 26: return 52; 
break;
case 27: return 51; 
break;
case 28: return 22; 
break;
case 29: return 23; 
break;
case 30: return 21; 
break;
case 31: return 19; 
break;
case 32: return 20; 
break;
case 33: return 26; 
break;
case 34: return 25; 
break;
case 35: return 24; 
break;
case 36: return 24; 
break;
case 37: return 36; 
break;
case 38: return 38; 
break;
case 39: return 33; 
break;
case 40: return 31; 
break;
case 41: return 32; 
break;
case 42: return 30; 
break;
case 43: return 28; 
break;
case 44: return 28; 
break;
case 45: return 29; 
break;
case 46: return 29; 
break;
case 47: return 9; 
break;
case 48: return 27; 
break;
case 49: return 34; 
break;
case 50: return 7; 
break;
case 51: return 7; 
break;
case 52: return 5; 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:,)/i,/^(?:NULL\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:SELECT\b)/i,/^(?:FROM\b)/i,/^(?:DISTINCT\b)/i,/^(?:NUMERIC\b)/i,/^(?:WHERE\b)/i,/^(?:ORDER\b)/i,/^(?:GROUP\b)/i,/^(?:BY\b)/i,/^(?:HAVING\b)/i,/^(?:COUNT\b)/i,/^(?:LIMIT\b)/i,/^(?:OFFSET\b)/i,/^(?:LEFT\b)/i,/^(?:INNER\b)/i,/^(?:"(\\.|[^\\"])*")/i,/^(?:'(\\.|[^\\'])*')/i,/^(?:[+-]?[0-9][0-9.]*)/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:DESC\b)/i,/^(?:IN\b)/i,/^(?:ON\b)/i,/^(?:JOIN\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:===)/i,/^(?:!==)/i,/^(?:==)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:AND\b)/i,/^(?:&&)/i,/^(?:OR\b)/i,/^(?:\|\|)/i,/^(?:\.)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:`(\\.|[^\\`])*`)/i,/^(?:([a-z_][a-z0-9_-]*))/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
